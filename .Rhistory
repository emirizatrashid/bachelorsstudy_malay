geom_line(aes(y = gentoo_te_error), color = "darkgreen", linetype = "F1") +
theme() +
labs(x = "k", y = "Test Errors")
#Precision
#Recall
?geom_line()
#Test errors
ggplot(error_data, aes(x=k)) +
geom_line(aes(y = adelie_te_error), color = "darkred", show.legend = TRUE) +
geom_line(aes(y = chinstrap_te_error), color = "steelblue", linetype = "twodash", show.legend = TRUE) +
geom_line(aes(y = gentoo_te_error), color = "darkgreen", linetype = "F1", show.legend = TRUE) +
theme() +
labs(x = "k", y = "Test Errors")
#Precision
#Recall
library(tidyverse)
#Test errors
library(tidyverse)
df <- error_data %>% select(k, ends_with(te_error)) %>% gather(key = "variable", value = "value", -k)
View(penguins)
View(error_data)
#Test errors
library(tidyverse)
df <- error_data %>% select(k, ends_with(te_error))
#Test errors
library(tidyverse)
df <- error_data %>% select(k, ends_with("te_error")) %>% gather(key = "variable", value = "value", -k)
#Precision
#Recall
View(df)
#Test errors
library(tidyverse)
df <- error_data %>% select(k, ends_with("te_error")) %>% gather(key = "variable", value = "value", -k)
ggplot(df, aes(x=k, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue", "darkgreen"))
#Precision
#Recall
#Test errors
library(tidyverse)
test_error <- error_data %>% select(k, ends_with("te_error")) %>% gather(key = "variable", value = "value", -k)
ggplot(test_error, aes(x=k, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue", "darkgreens"))
#Test errors
library(tidyverse)
test_error <- error_data %>% select(k, ends_with("te_error")) %>% gather(key = "variable", value = "value", -k)
ggplot(test_error, aes(x=k, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue", "darkgreen"))
#Precision
#Recall
View(error_data)
View(error_data)
#Test errors
library(tidyverse)
test_error <- error_data %>% select(k, ends_with("te_error")) %>% gather(key = "variable", value = "value", -k)
ggplot(test_error, aes(x=k, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue", "darkgreen"))
#Precision
precision_data <- error_data %>% select(k, ends_with("precision")) %>% gather(key = "variable", value = "value", -k)
ggplot(precision_data, aes(x=k, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue", "darkgreen"))
#Recall
recall_data <- error_data %>% select(k, ends_with("recall")) %>% gather(key = "variable", value = "value", -k)
ggplot(recall_data, aes(x=k, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue", "darkgreen"))
library(readr)
candidates_ge15 <- read_csv("Documents/Dissertation Project/analysis-election-msia-main/data/candidates_ge15.csv")
View(candidates_ge15)
library(readr)
candidates_ge14 <- read_csv("Documents/Dissertation Project/analysis-election-msia-main/data/candidates_ge14.csv")
View(candidates_ge14)
library(readr)
results_parlimen_ge14 <- read_csv("Documents/Dissertation Project/analysis-election-msia-main/data/results_parlimen_ge14.csv")
View(results_parlimen_ge14)
library(readr)
results_parlimen_ge15 <- read_csv("Documents/Dissertation Project/analysis-election-msia-main/data/results_parlimen_ge15.csv")
View(results_parlimen_ge15)
library(dplyr)
results_parlimen_ge14<-results_parlimen_ge14 %>% mutate(majority_percent = majoriti/pengundi_jumlah)
results_parlimen_ge15<-results_parlimen_ge15 %>% mutate(majority_percent = majoriti/pengundi_jumlah)
lm(results_parlimen_ge14$majority_percent ~ results_parlimen_ge15$majority_percent)
lmod<-lm(results_parlimen_ge14$majority_percent ~ results_parlimen_ge15$majority_percent)
lmod
results_parlimen_ge15<-results_parlimen_ge15 %>% mutate(maority_prior = results_parlimen_ge14)
rm(results_parlimen_ge15)
library(readr)
results_parlimen_ge15 <- read_csv("Documents/Dissertation Project/analysis-election-msia-main/data/results_parlimen_ge15.csv")
View(results_parlimen_ge15)
results_parlimen_ge15<-results_parlimen_ge15 %>% mutate(majority_percent = majoriti/pengundi_jumlah)
results_parlimen_ge15<-results_parlimen_ge15 %>% mutate(majority_prior = results_parlimen_ge14$majority_percent)
lmod<-lm(majority_prior ~ majority_percent, data = results_parlimen_ge15)
lmod
summary(lmod)
results_parlimen_ge15<-results_parlimen_ge15 %>% mutate(turnout_prior = results_parlimen_ge14$peratus_keluar)
lmod<-lm(turnout_prior ~ peratus_keluar, data = results_parlimen_ge15)
summary(lmod)
plot(lmod)
summary(lmod)
results_parlimen_ge15<-results_parlimen_ge15 %>% mutate(pengundi_2018 = results_parlimen_ge14$pengundi_jumlah)
results_parlimen_ge15<-results_parlimen_ge15 %>% mutate(tambahan_pengundi = (pengundi_jumlah-pengundi_2018))
lmod<-lm(tambahan_pengundi ~ turnout_prior, data = results_parlimen_ge15)
summary(lmod)
results_parlimen_ge15$tambahan_pengundi<-results_parlimen_ge15$tambahan_pengundi/results_parlimen_ge15$pengundi_2018
lmod<-lm(tambahan_pengundi ~ turnout_prior, data = results_parlimen_ge15)
summary(lmod)
0.008*100
lmod<-lm(tambahan_pengundi ~ peratus_keluar, data = results_parlimen_ge15)
lmod<-lm(tambahan_pengundi ~ peratus_keluar/100, data = results_parlimen_ge15)
lmod<-lm(tambahan_pengundi ~ (peratus_keluar/100)), data = results_parlimen_ge15)
results_parlimen_ge15$peratus_keluar<-results_parlimen_ge15$peratus_keluar/100
lmod<-lm(tambahan_pengundi ~ peratus_keluar, data = results_parlimen_ge15)
summary(lmod)
lmod<-lm(turnout_prior ~ tambahan_pengundi, data = results_parlimen_ge15)
summary(lmod)
results_parlimen_ge15$pengundi_2018<-results_parlimen_ge15$pengundi_2018/100
results_parlimen_ge15$pengundi_2018<-results_parlimen_ge15$pengundi_2018*100
results_parlimen_ge15$turnout_prior<-results_parlimen_ge15$turnout_prior/100
lmod<-lm(turnout_prior ~ tambahan_pengundi, data = results_parlimen_ge15)
summary(lmod)
plot(lmod)
lmod<-lm(majority_prior ~ tambahan_pengundi, data = results_parlimen_ge15)
summary(lmod)
lmod<-lm(tambahan_pengundi ~ majority_percent, data = results_parlimen_ge15)
summary(lmod)
View(results_parlimen_ge14)
View(results_parlimen_ge15)
View(results_parlimen_ge14)
View(results_parlimen_ge14)
View(candidates_ge15)
View(candidates_ge14)
candidates_ge14 %>% group_by(parlimen, party) %>% summarise(sum(votes^2))
candidates_ge14 %>% group_by(state, parlimen, party) %>% summarise(sum(votes^2))
turnout_2018<-results_parlimen_ge14 %>% select(state, parlimen, undi_keluar_peti)
37432/46098
candidates_ge14<-inner_join(candidates_ge14, turnout_2018, by = c(state, parlimen))
candidates_ge14<-inner_join(candidates_ge14, turnout_2018, by = c("state", "parlimen"))
View(candidates_ge14)
candidates_ge14<-candidates_ge14 %>% mutate(vote_share = votes/undi_keluar_peti)
2018_competition<-candidates_ge14 %>% select(parlimen, party, vote_share)
2018competition<-candidates_ge14 %>% select(parlimen, party, vote_share)
competition_2018<-candidates_ge14 %>% select(parlimen, party, vote_share)
competition_2018 %>% group_by(party) %>% summarise(sum(vote_share^2))
competition_2018 %>% group_by(parlimen) %>% summarise(sum(vote_share^2))
competition<- competition_2018 %>% group_by(parlimen) %>% summarise(sum(vote_share^2))
View(competition_2018)
View(competition)
results_parlimen_ge15<- results_parlimen_ge15 %>% mutate(competition = competition$`sum(vote_share^2)`)
View(results_parlimen_ge15)
lmod<-lm(competition ~ tambahan_pengundi, results_parlimen_ge15)
summary(lmod)
rm(competition)
View(turnout_2018)
turnout_2022<-results_parlimen_ge15 %>% select(state, parlimen, undi_keluar_peti )
candidates_ge15<-inner_join(candidates_ge15, turnout_2022, by = c("state", "parlimen"))
View(candidates_ge15)
candidates_ge15<-candidates_ge15 %>% mutate(vote_share = votes/undi_keluar_peti)
competition_2022<-candidates_ge15 %>% select(parlimen, party, vote_share)
competition<-competition_2022 %>% group_by(parlimen) %>% summarise(sum(vote_share^2))
View(competition)
View(recall_data)
View(results_parlimen_ge15)
candidates_ge15<-candidates_ge15 %>% mutate(competition_2022 = competition$`sum(vote_share^2)`)
candidates_ge15<-candidates_ge15 %>% mutate(competition2022 = competition$`sum(vote_share^2)`)
competition$`sum(vote_share^2)`
competition_ge15<-competition$`sum(vote_share^2)`
results_parlimen_ge15<-rbind(results_parlimen_ge15, competition_ge15)
library(readr)
results_parlimen_ge15 <- read_csv("Documents/Dissertation Project/analysis-election-msia-main/data/results_parlimen_ge15.csv")
View(results_parlimen_ge15)
competition <- competition_2018 %>% group_by(parlimen) %>% summarise(sum(vote_share^2))
lmod<-lm(competition$`sum(vote_share^2)` ~ competition_ge15)
summary(lmod)
results_parlimen_ge15<-results_parlimen_ge15 %>% mutate(prior_pengundi = results_parlimen_ge14$pengundi_jumlah)
results_parlimen_ge15$prior_pengundi <-(results_parlimen_ge15$pengundi_jumlah - results_parlimen_ge15$prior_pengundi)/results_parlimen_ge15$prior_pengundi
lmod(results_parlimen_ge15$prior_pengundi ~ competition_ge15)
lmod,-lm(results_parlimen_ge15$prior_pengundi ~ competition_ge15)
lmod<-lm(results_parlimen_ge15$prior_pengundi ~ competition_ge15)
summary(lmod)
rm(list=ls())
library(readxl)
malaysia_elections <- read_excel("Documents/Dissertation Project/malaysia_elections.xlsx")
View(malaysia_elections)
library(dplyr)
malaysia_elections <- malaysia_elections %>% select(ctr_n, yr, mn, sub, cst_n, cst, pty_n, vv1, pv1, pvs1, seat)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(glmnet)
library(quanteda)
download.file('https://github.com/lse-my474/pset_data/raw/main/coms_tr.csv', 'coms_tr.csv')
download.file('https://github.com/lse-my474/pset_data/raw/main/coms_te.csv', 'coms_te.csv')
coms_te <- read.csv('coms_te.csv', stringsAsFactors = F)
coms_tr <- read.csv('coms_tr.csv', stringsAsFactors = F)
coms_te$sample <- rep('test', nrow(coms_te))
coms_te$toxic <- NA
coms_tr$sample <- rep('train', nrow(coms_tr))
data <- rbind(coms_tr, coms_te)
#rm(coms_tr, coms_te)
library(dplyr)
library(stringr)
library(quanteda.sentiment)
data <- data %>%
mutate(words_in_capslock = str_count(comment, "\\b[A-Z]{2,}\\b"), # https://stackoverflow.com/questions/33197733/how-to-count-capslock-in-string-using-r
repeated_punct = str_count(comment, "[?!]{2,}"))
corpus <- corpus(data, text_field="comment")
View(training_set)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(glmnet)
library(quanteda)
library(tidytext)
download.file('https://github.com/lse-my474/pset_data/raw/main/coms_tr.csv', 'coms_tr.csv')
download.file('https://github.com/lse-my474/pset_data/raw/main/coms_te.csv', 'coms_te.csv')
coms_te <- read.csv('coms_te.csv', stringsAsFactors = F)
coms_tr <- read.csv('coms_tr.csv', stringsAsFactors = F)
coms_te$sample <- rep('test', nrow(coms_te))
coms_te$toxic <- NA
coms_tr$sample <- rep('train', nrow(coms_tr))
data <- rbind(coms_tr, coms_te)
#rm(coms_tr, coms_te)
# remotes::install_github("quanteda/quanteda.sentiment")
library(dplyr)
library(stringr)
library(quanteda.sentiment)
data <- data %>%
mutate(words_in_capslock = str_count(comment, "\\b[A-Z]{2,}\\b"), # https://stackoverflow.com/questions/33197733/how-to-count-capslock-in-string-using-r
repeated_punct = str_count(comment, "[?!]{2,}"))
corpus <- corpus(data, text_field="comment")
tokens <- tokens(corpus, remove_punct = T, remove_symbols = T,
remove_numbers = T, remove_separators = T, remove_url = T) %>%
tokens_remove(pattern = stopwords("en"))
dfm <- dfm(tokens) %>% dfm_tfidf()
sentiment <- dfm %>% textstat_polarity(dictionary = data_dictionary_NRC)
dfm <- dfm %>% dfm_wordstem() %>% dfm_trim(sparsity = 0.9999)
dfm$sentiment <- sentiment[,2]
train_dfm <- dfm[dfm$sample == 'train',]
test_dfm <- dfm[dfm$sample == 'test',]
cors <- tibble(feature = character(0),
est = numeric(0),
se = numeric(0),
df = numeric(0))
for (i in 1:train_dfm@Dim[2]) {
mod <- lm(train_dfm@docvars[["toxic"]] ~ as.vector(train_dfm[,i]))
cors <- cors %>%
add_row(feature = train_dfm@Dimnames$features[i],
est = summary(mod)[["coefficients"]][2,1],
se = summary(mod)[["coefficients"]][2,2],
df = mod[["df.residual"]])
}
rm(list = ls())
set.seed(1)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(glmnet)
library(quanteda)
library(tidytext)
#download.file('https://github.com/lse-my474/pset_data/raw/main/coms_tr.csv', 'coms_tr.csv')
#download.file('https://github.com/lse-my474/pset_data/raw/main/coms_te.csv', 'coms_te.csv')
coms_te <- read.csv('coms_te.csv', stringsAsFactors = F)
coms_tr <- read.csv('coms_tr.csv', stringsAsFactors = F)
coms_te$sample <- rep('test', nrow(coms_te))
coms_te$toxic <- NA
coms_tr$sample <- rep('train', nrow(coms_tr))
data <- rbind(coms_tr, coms_te)
#rm(coms_tr, coms_te)
library(tidytext)
library(dplyr)
library(ISLR)
library(class)
train_words<-coms_tr %>% unnest_tokens(word, comment) %>% count(rev_id, word, sort = TRUE)
total_words <- train_words %>% group_by(rev_id) %>% summarize(total = sum(n))
train_words<-left_join(train_words, total_words)
rm(total_words)
train_words <- inner_join(train_words, coms_tr, by = "rev_id")
train_words<-train_words %>% bind_tf_idf(word, rev_id, n)
test_words<-coms_te %>% unnest_tokens(word, comment) %>% count(rev_id, word, sort = TRUE)
total_words <- test_words %>% group_by(rev_id) %>% summarize(total = sum(n))
test_words<-left_join(test_words, total_words)
rm(total_words)
test_words<-inner_join(test_words, coms_te, by = "rev_id")
test_words<-test_words %>% bind_tf_idf(word, rev_id, n)
lmod<-lm(toxic ~ n + total + tf_idf, data = train_words)
te_sc<-test_words %>% select(n, total, tf_idf)
prediction<-predict(lmod, te_sc)
test_words$toxic<-prediction
test_words <- test_words %>% mutate(weights = (n*toxic/total))
prediction_comment<-test_words %>% group_by(rev_id) %>% summarise(sum(weights))
prediction_comment <- prediction_comment %>% rename(toxic = `sum(weights)`)
coms_te<-coms_te %>% select(-toxic)
coms_te<-left_join(coms_te, prediction_comment, by = "rev_id")
##also replace NA with 0
coms_te$toxic[is.na(coms_te$toxic)]<-0
##Since there are around 10% toxic comments let's pick 25% as a threshold
coms_te$toxic[coms_te$toxic<0.5]<-0
coms_te$toxic[coms_te$toxic>0.5]<-1
prediction <- coms_te %>% select(rev_id, toxic)
write.csv(prediction, "prediction.csv")
rm(list = ls())
View(da37056.0001)
View(da37057.0001)
View(da37057.0001)
library(readxl)
incarceration_trends <- read_excel("Downloads/incarceration_trends.xlsx")
View(incarceration_trends)
library(readr)
voters_ge15 <- read_csv("Documents/Dissertation Project/analysis-election-msia-main 2/data/voters_ge15.csv")
View(voters_ge15)
library(readr)
results_parlimen_ge14 <- read_csv("Documents/Dissertation Project/analysis-election-msia-main 2/data/results_parlimen_ge14.csv")
View(results_parlimen_ge14)
load("~/Documents/GitHub/problem-set-4-2023-rage/assignment/code/cvlasso.RData")
View(cvlasso)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
```{r}
load("cvlasso.RData")
bestlam <- cvlasso$lambda.min
lasso.coef<-predict(cvlasso$glmnet.fit, type = "coefficients", s = bestlam)
lasso.coef<-predict(cvlasso$glmnet.fit, type = "coefficients", s = bestlam)
lasso.coef<-predict(cvlasso, type = "coefficients", s = bestlam)
bestlam <- cvlasso$lambda.min
lasso.coef<-predict(cvlasso$glmnet.fit, type = "coefficients", s = bestlam)
lasso.coef_1 <- as.matrix(lasso.coef$`1`)
lasso.coef_1 <- as.data.frame(lasso.coef_1)
library(glmnet)
lasso.coef<-predict(cvlasso$glmnet.fit, type = "coefficients", s = bestlam)
lasso.coef_1 <- as.matrix(lasso.coef$`1`)
View(lasso.coef_1)
View(lasso.coef)
library(glmnet)
library(caret)
library(data.table)
#download.file('https://github.com/lse-my474/pset_data/raw/main/songs_test.csv', 'songs_test.csv')
#download.file('https://github.com/lse-my474/pset_data/raw/main/songs_train.csv', 'songs_train.csv')
library(dplyr)
songs_tr <- read.csv('songs_train.csv')
songs_te <- read.csv('songs_test.csv')
library(glmnet)
songs_tr <- songs_tr %>% select(-song_id)
songs_tr$genre <-as.numeric(as.factor(songs_tr$genre))
genre <- songs_tr$genre
songs_tr <- songs_tr %>% select(-genre)
n_internal_test <- floor(nrow(songs_tr) * 0.5)
sample_id <- sample(1:nrow(songs_tr), n_internal_test)
View(lasso.coef_1)
View(lasso.coef)
View(cvlasso)
cvlasso$cvm
cvlasso$call
n_internal_test <- floor(nrow(songs_tr) * 0.75)
sample_id <- sample(1:nrow(songs_tr), n_internal_test)
internal_test_songs <- songs_tr[-sample_id,]
internal_prediction <- predict(cvlasso, s = bestlambda, newx = internal_test_songs)
internal_prediction <- predict(cvlasso, s = bestlam, newx = internal_test_songs)
internal_prediction <- predict(cvlasso, s = bestlam, newx = as.matrix(internal_test_songs))
internal_prediction
internal_prediction <- as.data.frame(internal_prediction)
View(internal_prediction)
genre <- c("hip hop", "pop", "rap", "rock")
View(internal_prediction)
names(internal_test_error)<-genre
names(internal_test_songs)<-genre
internal_test_error <- songs_tr_sub[sample_id, ]
internal_test_error <- songs_tr[-sample_id, ]
View(internal_test_songs)
View(internal_test_error)
View(internal_test_songs)
internal_prediction <- predict(cvlasso, s = bestlam, newx = as.matrix(internal_test_songs))
internal_prediction <- as.data.frame(internal_prediction)
genre <- c("hip hop", "pop", "rap", "rock")
internal_test_songs <- songs_tr[-sample_id,]
View(internal_test_songs)
View(internal_test_error)
rm(internal_test_error)
internal_prediction <- as.data.frame(internal_prediction)
genre <- c("hip hop", "pop", "rap", "rock")
names(internal_prediction)<-genre
internal_test_error <- songs_tr[-sample_id, ]
internal_prediction <- internal_prediction %>%
mutate(prediction = NA)
internal_prediction$prediction <- apply(internal_prediction, 1,
function(x) colnames(internal_prediction)[which.max(x)])
internal_test_songs <- internal_test_songs %>% mutate(prediction = internal_test_error$prediction)
View(internal_test_songs)
internal_test_songs <- internal_test_songs %>% mutate(prediction = internal_test_error$prediction)
View(internal_prediction)
internal_test_songs <- internal_test_songs %>% mutate(prediction = internal_prediction$prediction)
View(internal_test_songs)
library(glmnet)
library(caret)
library(data.table)
#download.file('https://github.com/lse-my474/pset_data/raw/main/songs_test.csv', 'songs_test.csv')
#download.file('https://github.com/lse-my474/pset_data/raw/main/songs_train.csv', 'songs_train.csv')
library(dplyr)
songs_tr <- read.csv('songs_train.csv')
songs_te <- read.csv('songs_test.csv')
internal_test_error <- songs_tr[-sample_id, ]
rm(internal_test_error)
View(internal_test_songs)
internal_test_songs <- songs_tr[-sample_id,]
View(internal_test_songs)
internal_test_songs <- internal_test_songs %>% mutate(prediction = internal_prediction$prediction)
internal_test_songs <- internal_test_song %>% mutate(misclassification = ifelse(genre == prediction, 0,1))
internal_test_songs <- internal_test_songs %>% mutate(misclassification = ifelse(genre == prediction, 0,1))
View(internal_test_songs)
internal_test_songs <- internal_test_songs %>% mutate(prediction = internal_prediction$prediction)
View(internal_test_songs)
View(internal_prediction)
internal_test_songs <- internal_test_songs %>% mutate(prediction = internal_prediction$prediction)
internal_test_songs <- internal_test_songs %>% mutate(prediction = internal_prediction$prediction)
View(internal_test_songs)
misclassification_error <- sum(internal_test_songs$misclassification/nrow(internal_test_songs))
misclassification_error
View(songs_te)
song_id <- songs_te$song_id
songs_te <- songs_te %>% select(-song_id)
prediction <- predict(cvlasso, s = bestlam, newx = as.matrix(songs_te))
genre <- c("hip hop", "pop", "rap", "rock")
names(prediction) <- genre
prediction <- prediction %>%
mutate(genre = NA)
prediction <- as.data.frame(prediction)
View(prediction)
names(prediction) <- genre
prediction <- prediction %>%
mutate(genre = NA)
prediction$genre <- apply(prediction, 1,
function(x) colnames(prediction)[which.max(x)])
prediction <- prediction %>% mutate(song_id = song_id)
prediction <- prediction %>% select(song_id, genre)
View(prediction)
write.csv(prediction, file = "lasso_pred.csv", row.names = FALSE)
load("xgb_cv_model.RData")
xgb_cv_model$evaluation_log
xgb_cv_model$best_ntreelimit
xgb_cv_model$best_iteration
View(xgb_cv_model)
evaluation_log <- xgb_cv_model$evaluation_log
View(evaluation_log)
xgb_cv_model$callbacks
internal_test_songs <- songs_tr_sub[sample_id, ]
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(glmnet)
library(caret)
library(data.table)
#download.file('https://github.com/lse-my474/pset_data/raw/main/songs_test.csv', 'songs_test.csv')
#download.file('https://github.com/lse-my474/pset_data/raw/main/songs_train.csv', 'songs_train.csv')
library(dplyr)
songs_tr <- read.csv('songs_train.csv')
songs_te <- read.csv('songs_test.csv')
set.seed(1)
## preamble
songs_tr <- songs_tr %>% select(-song_id)
n_internal_test = floor(nrow(songs_tr) * 0.25)
sample_id <- sample(1:nrow(songs_tr), n_internal_test)
songs_tr_sub <- songs_tr %>% select(coefficient_names)
internal_test_songs <- songs_tr_sub[sample_id, ]
songs_tr_sub <- songs_tr %>% select(coefficient_names)
load("cvlasso.RData")
bestlam <- cvlasso$lambda.min
lasso.coef<-predict(cvlasso$glmnet.fit, type = "coefficients", s = bestlam)
lasso.coef_1 <- as.matrix(lasso.coef$`1`)
lasso.coef_1 <- as.data.frame(lasso.coef_1)
lasso.coef_1 <- lasso.coef_1 %>% filter(`1` != 0)
library(tidyr)
lasso.coef_1 <- t(lasso.coef_1)
lasso.coef_1 <- as.data.frame(lasso.coef_1)
coefficient_names <- as.data.frame(names(lasso.coef_1))
coefficient_names <- coefficient_names %>% rename(coefficient = `names(lasso.coef_1)`)
library(dplyr)
coefficient_names <- coefficient_names[-1,]
set.seed(1)
## preamble
songs_tr <- songs_tr %>% select(-song_id)
n_internal_test = floor(nrow(songs_tr) * 0.25)
sample_id <- sample(1:nrow(songs_tr), n_internal_test)
songs_tr_sub <- songs_tr %>% select(coefficient_names)
internal_test_songs <- songs_tr_sub[sample_id, ]
internal_train_songs <- songs_tr_sub[-sample_id,]
internal_train_songs$genre <- NULL
internal_test_songs$genre <- NULL
load("xgb_cv_model.RData")
internal_test_songs <- songs_tr_sub[sample_id, ]
internal_test_songs$genre <- NULL
internal_test_songs <- as.matrix(internal_test_songs)
xgb_internal_test_error <- predict(xgb_cv_model, internal_test_songs, reshape = T)
internal_test_songs <- xgb.DMatrix(data = internal_test_songs,
label = internal_test_label)
library(xgboost)
install.packages("xgboost")
library(xgboost)
num_class <- 4
label <- as.factor(songs_tr$genre)
label <- as.integer(label)-1
internal_train_songs <-as.matrix(internal_train_songs)
internal_train_label<-label[-sample_id]
internal_test_songs <- as.matrix(internal_test_songs)
internal_test_label <- label[sample_id]
internal_train_songs<-xgb.DMatrix(data = internal_train_songs, label = internal_train_label)
internal_test_songs <- xgb.DMatrix(data = internal_test_songs,
label = internal_test_label)
xgb_internal_test_error <- predict(xgb_cv_model, internal_test_songs, reshape = T)
library(glmnet)
xgb_internal_test_error <- predict(xgb_cv_model, internal_test_songs, reshape = T)
